Usage: jpackage <options>

Sample usages:
--------------
    Generate a non-modular application image:
        jpackage -o outputdir -i inputdir -n name \
            --main-class className --main-jar MyJar.jar
    Generate a modular application image:
        jpackage -o outputdir -n name -p modulePath -m moduleName/className
        To provide your own options to jlink, run jlink separately:
            jlink --output appRuntimeImage -p ModulePath -m moduleName \
                --no-header-files [<additional jlink options>...]
            jpackage -o outputdir -n name \
                -m moduleName/className --runtime-image appRuntimeImage
    Generate an application package:
        jpackage --package-type <type> -o outputdir -n name \
            -p modulePath -m moduleName/className
        jpackage --package-type <type> -i inputdir -o outputdir -n name \
            --main-class package.ClassName --main-jar MyJar.jar
        jpackage --package-type <type> -o outputdir -n name \
            --app-image <app image dir>
    Generate a Java runtime package:
        jpackage --package-type <type> -o outputdir -n name \
            --runtime-image <runtime-image>

Generic Options:
  @<filename> 
          Read options and/or mode from a file 
          This option can be used multiple times.
  --package-type <type> 
          The type of package to create
          Valid values are: {"exe", "msi"} 
          If this option is not specified an application image will be
          created.
  --app-version <version>
          Version of the application and/or package
  --copyright <copyright string>
          Copyright for the application
  --description <description string>
          Description of the application
  --help -h 
          Print the usage text with a list and description of each valid
          option for the current platform to the output stream, and exit
  --name -n <name>
          Name of the application and/or package
  --output -o <output path>
          Path where generated output file is placed
          (absolute path or relative to the current directory)
  --temp-root <file path>
          Path of a new or empty directory used to create temporary files
          (absolute path or relative to the current directory)
          If specified, the temp-root will not be removed upon the task
          completion and must be removed manually
          If not specified, a temporary directory will be created and
          removed upon the task completion.
  --vendor <vendor string>
          Vendor of the application
  --verbose
          Enables verbose output
  --version
          Print the product version to the output stream and exit

Options for creating the runtime image:
  --add-modules <module name>[,<module name>...]
          A comma (",") separated list of modules to add.
          This module list, along with the main module (if specified)
          will be passed to jlink as the --add-module argument.
          if not specified, either just the main module (if --module is
          specified), or the default set of modules (if --main-jar is 
          specified) are used.
          This option can be used multiple times.
  --module-path -p <module path>...
          A ; separated list of paths
          Each path is either a directory of modules or the path to a
          modular jar.
          (each path is absolute or relative to the current directory)
          This option can be used multiple times.
  --runtime-image <file path>
          Path of the predefined runtime image that will be copied into
          the application image
          (absolute path or relative to the current directory)
          If --runtime-image is not specified, jpackage will run jlink to
          create the runtime image using options:
          --strip-debug, --no-header-files, --no-man-pages, and
          --strip-native-commands.  --bind-services will also be added if
          --add-modules is not specified.

Options for creating the application image:
  --icon <icon file path>
          Path of the icon of the application bundle
          (absolute path or relative to the current directory)
  --input -i <input path>
          Path of the input directory that contains the files to be packaged
          (absolute path or relative to the current directory)
          All files in the input directory will be packaged into the
          application image.

Options for creating the application launcher(s):
  --add-launcher <launcher name>=<file path>
          Name of launcher, and a path to a Properties file that contains
          a list of key, value pairs
          (absolute path or relative to the current directory)
          The keys "module", "main-jar", "main-class",
          "arguments", "java-options", "app-version", "icon", and
          "win-console" can be used.
          These options are added to, or used to overwrite, the original
          command line options to build an additional alternative launcher.
          The main application launcher will be built from the command line
          options. Additional alternative launchers can be built using
          this option, and this option can be used multiple times to
          build multiple additional launchers. 
  --arguments <main class arguments>
          Command line arguments to pass to the main class if no command
          line arguments are given to the launcher
          This option can be used multiple times.
  --java-options <java options>
          Options to pass to the Java runtime
          This option can be used multiple times.
  --main-class <class name>
          Qualified name of the application main class to execute
          This option can only be used if --main-jar is specified.
  --main-jar <main jar file>
          The main JAR of the application; containing the main class
          (specified as a path relative to the input path)
          Either --module or --main-jar option can be specified but not
          both.
  --module -m <module name>[/<main class>]
          The main module (and optionally main class) of the application
          This module must be located on the module path.
          When this option is specified, the main module will be linked
          in the Java runtime image.  Either --module or --main-jar
          option can be specified but not both.

Platform dependent option for creating the application launcher:
  --win-console
          Creates a console launcher for the application, should be
          specified for application which requires console interactions

Options for creating the application package:
  --app-image <file path>
          Location of the predefined application image that is used
          to build an installable package
          (absolute path or relative to the current directory)
  --file-associations <file path>
          Path to a Properties file that contains list of key, value pairs
          (absolute path or relative to the current directory)
          The keys "extension", "mime-type", "icon", and "description"
          can be used to describe the association.
          This option can be used multiple times.
  --identifier <id string>
          An identifier that uniquely identifies the application
          Defaults to the main class name.
          The value should be a valid DNS name.
  --install-dir <file path>
          Relative sub-path under the default installation location
  --license-file <file path>
          Path to the license file
          (absolute path or relative to the current directory)
  --resource-dir <path>
          Path to override jpackage resources
          Icons, template files, and other resources of jpackage can be
          over-ridden by adding replacement resources to this directory.
          (absolute path or relative to the current directory)
  --runtime-image <file-path>
          Path of the predefined runtime image to install
          (absolute path or relative to the current directory)
          Option is required when creating a runtime package.

Platform dependent options for creating the application package:
  --win-dir-chooser
          Adds a dialog to enable the user to choose a directory in which
          the product is installed
  --win-menu
          Adds the application to the system menu
  --win-menu-group <menu group name>
          Start Menu group this application is placed in
  --win-per-user-install
          Request to perform an install on a per-user basis
  --win-shortcut
          Creates a desktop shortcut for the application
  --win-upgrade-uuid <id string>
          UUID associated with upgrades for this package

